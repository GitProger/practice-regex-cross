#!/usr/bin/env python3
## sample solver for rectangles
'''
https://habr.com/ru/post/302662/
https://github.com/ReinRaus/RegexCrossTool
'''

import math, re, random
import sys

class Cell:
    alphabet = set("ABCDEFGHIJKLMNOPQRSTUVWXYZ")
#    alphabet = set("ABCDEF")
    def __init__(self, p=None, mode=1):
        alphabet = Cell.alphabet
        if not p:
            self.possible = alphabet
        if mode == 1: #p is class
            if p == ".":
                self.possible = alphabet
            elif re.match("\[.*\]", p):
                self.possible = set(p[1:-1])
            elif re.match("\[\^.*\]", p):
                self.possible = alphabet - set(p[2:-1])
            else:
                self.possible = set(p)
        elif mode == 2: # p is alphabet
            self.possible = p
    def __and__(self, c):
        return Cell(self.possible & c.possible, 2)
    def __str__(self):
        if len(self.possible) == 0: return '-'
        if len(self.possible) > 1: return '*'
        return list(self.possible)[0]
#        return "".join(list(self.possible))


ATOM_REGEX = r"\[\^?[A-Z]+\]|\.|\\\\w|[A-Z]"
ATOM_RE_CM = re.compile(ATOM_REGEX, re.I)

def get_atoms(regex: str):
    return ATOM_RE_CM.findall(regex)    
def atomization_regex(r: str):
    return ATOM_RE_CM.sub(lambda a: "(?:" + re.escape(a.group(0)) + ")", r)



name = "rect.txt"
if len(sys.argv) > 1: name = sys.argv[1]
f = list(
        filter(
            lambda l: l != "" and l[0] != '#',
            map(
                str.strip, 
                open(name).readlines()
            )
        )
    )

h, w = map(int, f[0].split())
Map = [[None for __ in range(w)] for _ in range(h)]
f = f[1:]
hor = list(map(get_atoms, f[:h]))
ver = list(map(get_atoms, f[h:]))

for i in range(h):
    for j in range(w):
        Map[i][j] = Cell(hor[i][j]) & Cell(ver[j][i])

print("\n".join(list(map(lambda row: " ".join(map(str, row)), Map))))


